TARGET = turn_based_strategy
TARGET2 = hello

SRC = src
INC = inc
OBJ = obj
OBJ_HELLO = $(OBJ)/hello

SRC_HELLO = players_programs
SOURCE_HELLO = $(wildcard $(SRC_HELLO)/*.cpp)
OBJECT_HELLO = $(patsubst $(SRC_HELLO)/%,$(OBJ_HELLO)/%,$(SOURCE_HELLO:.cpp=.o))

SOURCE = $(wildcard $(SRC)/*.cpp)
OBJECT = $(patsubst %,$(OBJ)/%,$(notdir $(SOURCE:.cpp=.o)))

CC = g++
CFLAGS = -Wall -std=c++17 -pedantic -I$(INC)

RED = \033[1;31m
GREEN = \033[1;32m
BLUE = \033[1;34m
YELLOW = \033[1;33m
NC = \033[1;0m

all: $(TARGET) $(TARGET2)

./$(TARGET): $(OBJECT)
	@echo "$(RED)Linkowanie...$(NC)"
	$(CC) -o $@ $^ 
	@echo "$(BLUE)Linkowanie zakonczone sukcesem.$(NC)"
	$(MAKE) $(TARGET2) -B

$(OBJ)/%.o: $(SRC)/%.cpp
	@echo "$(GREEN)Kompilacja...$(NC)"
	$(CC) $(CFLAGS) -c $< -o $@

$(TARGET2): $(OBJECT_HELLO)
	@echo "$(RED)Linkowanie hello...$(NC)"
	$(CC) -o $@ $^
	@echo "$(BLUE)Linkowanie hello zakonczone sukcesem.$(NC)"

$(OBJ_HELLO)/%.o: $(SRC_HELLO)/%.cpp | $(OBJ_HELLO)
	@echo "$(GREEN)Kompilacja hello...$(NC)"
	$(CC) $(CFLAGS) -c $< -o $@

$(OBJ_HELLO):
	mkdir -p $(OBJ_HELLO)

.PHONY: help run clean info

run: ./$(TARGET)
	@echo "$(YELLOW)Uruchamianie programu....$(NC)"
	./$(TARGET)

clean:
	rm -f $(OBJECT) $(OBJECT_HELLO) ./$(TARGET) ./$(TARGET2) core.* core

help:
	@echo "src: $(SOURCE)"
	@echo "obj: $(OBJECT)"
	@echo "src_hello: $(SOURCE_HELLO)"
	@echo "obj_hello: $(OBJECT_HELLO)"

info:
	@echo "Uniwersalny plik Makefile do budowy programu w jezyku C++"
	@echo "Do poprawnego dziaÅ‚ania wymagane jest zachowanie struktury modulowej programu"
	@echo "inc - katalog na pliki naglowkowe"
	@echo "src - katalog na pliki zrodlowe"
	@echo "obj - katalog na pliki wynikowe (na wejsciu pusty)"
	@echo "src_hello - katalog na pliki zrodlowe dla hello"
	@echo "obj_hello - katalog na pliki wynikowe dla hello"

